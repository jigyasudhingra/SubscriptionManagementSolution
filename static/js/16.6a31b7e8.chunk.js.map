{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","Utils/helpers.ts"],"names":["_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError","helpers","toggleItemFromList","list","item","key","comaprisonFunction","updatedList","index","findIndex","i","push","splice","getDummyImageUrl","w","h","bytesToSize","bytes","Math","floor","log","pow","toFixed","isListSimilar","list1","list2","length","forEach","elem","id","updateItemList","action","itemIndex","newList","slice","listItem","unshift","filter","findValues","superSet","subSet","findKey","mapKey","isReturnItem","isString","filteredValues","indexOf","map","hexToRgb","hex","opacity","result","exec","parseInt"],"mappings":"4KAIe,SAASA,EAAmBC,GACzC,OCJa,SAA4BA,GACzC,GAAIC,MAAMC,QAAQF,GAAM,OAAO,OAAAG,EAAA,GAAiBH,GDGzC,CAAkBA,IELZ,SAA0BI,GACvC,GAAsB,qBAAXC,QAA0BA,OAAOC,YAAYC,OAAOH,GAAO,OAAOH,MAAMO,KAAKJ,GFIvD,CAAgBJ,IAAQ,OAAAS,EAAA,GAA2BT,IGLvE,WACb,MAAM,IAAIU,UAAU,wIHIwE,G,aIHxFC,EAAU,CACZC,mBAAoB,WAKd,IAJFC,EAIC,uDAJa,GACdC,EAGC,uCAFDC,EAEC,uDAFK,KACNC,EACC,uCACKC,EAAkB,EAAOJ,GACzBK,EAAQL,EAAKM,WAAU,SAACC,GAAD,OACzBJ,EAAqBA,EAAmBI,EAAGN,GAAQM,EAAEL,KAASD,EAAKC,MAGvE,OADW,IAAXG,EAAeD,EAAYI,KAAKP,GAAQG,EAAYK,OAAOJ,EAAO,GAC3DD,GAEXM,iBAAkB,eAACC,EAAD,uDAAK,IAAKC,EAAV,uDAAc,IAAd,mDACwBD,EADxB,YAC6BC,IAC/CC,YAAa,SAACC,GAEV,GAAc,IAAVA,EAAa,MAAO,SACxB,IAAMP,EAAIQ,KAAKC,MAAMD,KAAKE,IAAIH,GAASC,KAAKE,IAAI,OAEhD,MAAM,GAAN,QAAWH,EAAQC,KAAKG,IAAI,KAAMX,IAAIY,QAAQ,GAA9C,YAJc,CAAC,QAAS,KAAM,KAAM,KAAM,MAIgBZ,KAG9Da,cAAe,SAACC,EAAmBC,GAC/B,OAAID,EAAME,SAAWD,EAAMC,SAE3BF,EAAMG,SAAQ,SAACC,GAEX,IAAe,IADDH,EAAMhB,WAAU,SAACC,GAAD,OAAOA,EAAEmB,KAAOD,EAAKC,MACjC,OAAO,MAEtB,IAEXC,eAAgB,SACZ3B,EACAC,EACA2B,GAEe,IAIXC,EALJ3B,EACc,uDADH,KAIL4B,GADN9B,EAAOA,GAAQ,IACM+B,QAErB,MAAe,WAAXH,IAEmB,KADnBC,EAAYC,EAAQxB,WAAU,SAAC0B,GAAD,OAAc/B,EAAKC,KAAS8B,EAAS9B,QAC7C4B,EAAQrB,OAAOoB,EAAW,EAAG5B,GAC5C6B,GAEI,QAAXF,GACAE,EAAQG,QAAQhC,GACT6B,GAEI,WAAXF,EACOE,EAAQI,QAAO,SAACF,GAAD,OAAc/B,EAAKC,KAAS8B,EAAS9B,MAEhD,QAAX0B,IAEmB,KADnBC,EAAYC,EAAQxB,WAAU,SAAC0B,GAAD,OAAc/B,EAAKC,KAAS8B,EAAS9B,OAC7C4B,EAAQrB,OAAOoB,EAAW,EAAG5B,GAE/C6B,EAAQtB,KAAKP,GAEV6B,GAEJA,GAEXK,WAAY,SACRC,EACAC,GAIE,IAHFC,EAGC,uDAHS,QACVC,EAEC,uDAFQ,OACTC,EACC,wDAIGC,mBAASJ,KAASA,EAAS,CAACA,IAChC,IAAMK,EAAiBR,iBAAOE,GAAU,SAACnC,GACrC,OAA2C,IAApC0C,kBAAQN,EAAQpC,EAAKqC,OAEhC,OAAIE,EAAqBE,EAClBE,cAAIF,EAAgBH,IAE/BM,SAAU,SAACC,GAAkC,IAArBC,EAAoB,uDAAV,MACxBC,EAAS,4CAA4CC,KAAKH,GAChE,OAAIE,EACM,OAAN,OAAcE,SAASF,EAAO,GAAI,IAAlC,YAAyCE,SACrCF,EAAO,GACP,IAFJ,aAGME,SAASF,EAAO,GAAI,IAH1B,YAGiCD,EAHjC,KAOG,KAGAjD","file":"static/js/16.6a31b7e8.chunk.js","sourcesContent":["import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import { isString, map, filter, indexOf } from 'lodash';\n\nconst helpers = {\n    toggleItemFromList: (\n        list: any[] = [],\n        item: any,\n        key = 'id',\n        comaprisonFunction?: (currentItem: any, item: any) => boolean\n    ) => {\n        const updatedList: any[] = [...list];\n        const index = list.findIndex((i) =>\n            comaprisonFunction ? comaprisonFunction(i, item) : i[key] === item[key]\n        );\n        index === -1 ? updatedList.push(item) : updatedList.splice(index, 1);\n        return updatedList;\n    },\n    getDummyImageUrl: (w = 800, h = 800) =>\n        `https://source.unsplash.com/random/${w}x${h}`,\n    bytesToSize: (bytes: number) => {\n        const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n        if (bytes === 0) return '0 Byte';\n        const i = Math.floor(Math.log(bytes) / Math.log(1024));\n        // eslint-disable-next-line no-restricted-properties\n        return `${(bytes / Math.pow(1024, i)).toFixed(2)} ${sizes[i]}`;\n    },\n\n    isListSimilar: (list1: Array<any>, list2: Array<any>) => {\n        if (list1.length !== list2.length) return false;\n        // eslint-disable-next-line consistent-return\n        list1.forEach((elem) => {\n            const index = list2.findIndex((i) => i.id === elem.id);\n            if (index === -1) return false;\n        });\n        return true;\n    },\n    updateItemList: (\n        list: Array<any>,\n        item: any,\n        action: 'ADD' | 'DELETE' | 'UPDATE' | 'PUT',\n        key: any = 'id'\n    ): typeof list => {\n        // eslint-disable-next-line no-param-reassign\n        list = list || [];\n        const newList = list.slice();\n        let itemIndex;\n        if (action === 'UPDATE') {\n            itemIndex = newList.findIndex((listItem) => item[key] === listItem[key]);\n            if (itemIndex !== -1) newList.splice(itemIndex, 1, item);\n            return newList;\n        }\n        if (action === 'ADD') {\n            newList.unshift(item);\n            return newList;\n        }\n        if (action === 'DELETE') {\n            return newList.filter((listItem) => item[key] !== listItem[key]);\n        }\n        if (action === 'PUT') {\n            itemIndex = newList.findIndex((listItem) => item[key] === listItem[key]);\n            if (itemIndex !== -1) newList.splice(itemIndex, 1, item);\n            else {\n                newList.push(item);\n            }\n            return newList;\n        }\n        return newList;\n    },\n    findValues: (\n        superSet: Array<Record<string, unknown>>,\n        subSet: string | Array<string>,\n        findKey = 'value',\n        mapKey = 'name',\n        isReturnItem = false\n    ) => {\n        // findKey = findKey || 'value';\n        // mapKey = mapKey || 'name';\n        // eslint-disable-next-line no-param-reassign\n        if (isString(subSet)) subSet = [subSet];\n        const filteredValues = filter(superSet, (item: any) => {\n            return indexOf(subSet, item[findKey]) !== -1;\n        });\n        if (isReturnItem) return filteredValues;\n        return map(filteredValues, mapKey);\n    },\n    hexToRgb: (hex: string, opacity = '0.1') => {\n        const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n        if (result)\n            return `rgb(${parseInt(result[1], 16)},${parseInt(\n                result[2],\n                16\n            )} ,${parseInt(result[3], 16)},${opacity})`;\n        // r: parseInt(result[1], 16),\n        // g: parseInt(result[2], 16),\n        // b: parseInt(result[3], 16)\n        return '';\n    },\n};\nexport default helpers;\n"],"sourceRoot":""}