{"version":3,"sources":["Hooks/useAsyncTask.tsx"],"names":["useAsyncTask","task","useState","status","setStatus","message","setMessage","run","arg","a","resp","get","reset"],"mappings":"wMAkCeA,UA9Bf,SAAyBC,GACvB,MAA4BC,mBAAkB,SAA9C,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KAoBA,MAAO,CACLC,IApBO,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,6DACVL,EAAU,cADA,kBAIKH,EAAKO,GAJV,OAIRE,EAJQ,OAKRN,EAAU,WACVE,EAAWI,EAAKL,SANR,gDAQFA,EAAUM,cAAI,EAAD,GAAQ,+BAC3BL,EAAWD,GACXD,EAAU,SAVF,iCAYHM,GAZG,yDAAH,sDAqBPP,SACAE,UACAO,MATY,WACZN,EAAW,IACXF,EAAU","file":"static/js/12.f7052f28.chunk.js","sourcesContent":["import { useState } from 'react';\nimport { get } from 'lodash';\n\ntype TStatus = 'IDEAL' | 'PROCESSING' | 'ERROR' | 'SUCCESS';\nfunction useAsyncTask<T>(task: (arg: T) => Promise<any>) {\n  const [status, setStatus] = useState<TStatus>('IDEAL');\n  const [message, setMessage] = useState('');\n  const run = async (arg: T) => {\n    setStatus('PROCESSING');\n    let resp;\n    try {\n      resp = await task(arg);\n      setStatus('SUCCESS');\n      setMessage(resp.message);\n    } catch (error) {\n      const message = get(error, 'response.data.error.message');\n      setMessage(message);\n      setStatus('ERROR');\n    }\n    return resp;\n  };\n  const reset = () => {\n    setMessage('');\n    setStatus('IDEAL');\n  };\n\n  return {\n    run,\n    status,\n    message,\n    reset,\n  };\n}\n\nexport default useAsyncTask;\n"],"sourceRoot":""}