{"version":3,"sources":["Hooks/useToastMessage.ts"],"names":["showToast","useContext","AppToastContext","action","a","toastConfig","res","successToastMessage","variant","msg","showApiErrorMsg","errorToastMessage","get"],"mappings":"wMAqBe,qBACb,IAAQA,EAAcC,qBAAWC,mBAAzBF,UAsBR,OApBe,uCAAG,WAChBG,GADgB,+BAAAC,EAAA,6DAEhBC,EAFgB,+BAEe,GAFf,kBAKIF,IALJ,cAKRG,EALQ,OAMdN,EAAUK,EAAYE,qBA1BE,UA0B4C,CAClEC,QAAS,YAPG,kBASPF,GATO,sCAWRG,GAC4B,IAAhCJ,EAAYK,gBACRL,EAAYM,mBAhCI,uBAiChBC,cAAI,EAAD,GAAQ,+BACjBZ,EAAUS,EAAK,CAAED,QAAS,UAfZ,8DAAH","file":"static/js/13.e49b58e2.chunk.js","sourcesContent":["import { useContext } from 'react';\nimport { get } from 'lodash';\nimport { AppToastContext } from '../Contexts/AppToastContext';\n\nconst SUCCESS_TOAST_MESSAGE = 'Success';\nconst ERROR_TOAST_MESSAGE = 'Something went wrong';\n\n/**\n * A hook for toast handling\n * @returns a function\n * @example\n * const withToast = useToastMessage(); // import useToastMessage first\n * const submitForm = async (formData: any) =>  await withToast(async () => {\n *      // do your async function and throw the error\n *  },\n *  {\n *      showApiErrorMsg: false, // without this flag, error message from api is displayed in toast\n *      successToastMessage: 'Form submitted successfully',\n *      errorToastMessage: 'Error submitting form',\n *  });\n */\nexport default () => {\n  const { showToast } = useContext(AppToastContext);\n\n  const withToast = async (\n    action: () => any,\n    toastConfig: WithToastConfig = {}\n  ) => {\n    try {\n      const res = await action();\n      showToast(toastConfig.successToastMessage || SUCCESS_TOAST_MESSAGE, {\n        variant: 'success',\n      });\n      return res;\n    } catch (error) {\n      const msg =\n        toastConfig.showApiErrorMsg === false\n          ? toastConfig.errorToastMessage || ERROR_TOAST_MESSAGE\n          : get(error, 'response.data.error.message');\n      showToast(msg, { variant: 'error' });\n      throw error;\n    }\n  };\n\n  return withToast;\n};\n\nexport interface WithToastConfig {\n  successToastMessage?: string;\n  errorToastMessage?: string;\n  showApiErrorMsg?: boolean;\n}\n"],"sourceRoot":""}